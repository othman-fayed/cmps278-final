@page "/users"
@using DocumentsWeb.Data
@using Microsoft.AspNetCore.Identity
@using Radzen
@using Radzen.Blazor
@using Microsoft.EntityFrameworkCore

@inject UserManager<User> UserManager


<div class="row">
    <div class="col-8">
        <h1>Users</h1>
        <p>List of users registered on the system.</p>

    </div>
    <div class="col-4 text-end d-flex flex-column align-items-end justify-content-around">
        <a class="btn btn-primary" href="Identity/Account/AddUser">Add User</a>
    </div>
</div>

@if (!UsersList.Any())
{
    <div class="alert alert-danger">No users are currently registered</div>
}
else
{
    <RadzenDataGrid @ref="grid"
                AllowFiltering="true" AllowColumnResize="true" AllowAlternatingRows="false" FilterMode="FilterMode.Advanced"
                AllowSorting="true" PageSize="5" AllowPaging="true" PagerHorizontalAlign="HorizontalAlign.Left" ShowPagingSummary="true"
                Data="@UsersList" TItem="DTO" ColumnWidth="300px" LogicalFilterOperator="LogicalFilterOperator.Or">
        <Columns>
            <RadzenDataGridColumn TItem="DTO" Property="User.TitleOfCourtesy" Title="Title" Width="90px" />
            <RadzenDataGridColumn TItem="DTO" Property="User.FirstName" Title="First Name" Frozen="true" Width="160px" />
            <RadzenDataGridColumn TItem="DTO" Property="User.LastName" Title="Last Name" Width="160px" />
            <RadzenDataGridColumn TItem="DTO" Property="User.Email" Title="Email" Width="200px" />
            <RadzenDataGridColumn TItem="DTO" Property="User.EmailConfirmed" Title="Email Confirmed" Width="120px" />
            <RadzenDataGridColumn TItem="DTO" Property="Roles" Title="Role" Width="160px" />
            <RadzenDataGridColumn TItem="DTO" Property="User.Id" Title="" Width="200px" Sortable="false" Filterable="false">
                <Template Context="data">
                    @if (!data.Roles.Contains("Approved"))
                    {
                        <button class="btn btn-success" onclick="@(async () => await ApproveUserAsync(data.User))">
                            Approve
                        </button>
                    }
                    @if (!data.Roles.Contains("Admin"))
                    {
                        <button class="btn btn-danger" onclick="@(async () => await DeleteUserAsync(data.User))">
                            Delete
                        </button>
                    }
                </Template>
            </RadzenDataGridColumn>
        </Columns>
    </RadzenDataGrid>
}

@code {

    public class DTO
    {
        public User User { get; set; }
        public string Roles { get; set; }
    }

    private RadzenDataGrid<DTO>? grid;
    private IList<DTO> UsersList { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await LoadAsync();
    }

    private async Task LoadAsync()
    {
        UsersList = new List<DTO>();
        var users = await UserManager.Users.ToListAsync();
        foreach (var u in users)
        {
            var roles = (await UserManager.GetRolesAsync(u)).OrderBy(x => x);
            //roles = roles.Where(rr => rr != "Approved").ToList();
            UsersList.Add(new DTO { User = u, Roles = (string.Join(", ", roles) ?? "-") });
        }
    }

    private async Task ApproveUserAsync(User user)
    {
        await UserManager.AddToRoleAsync(user, "Approved");
        await LoadAsync();
        if (grid is not null)
        {
            await grid.Reload();
        }
    }

    private async Task DeleteUserAsync(User user)
    {
        var roles = await UserManager.GetRolesAsync(user);
        if (roles.Contains("Admin"))
        {
            return;
        }
        else
        {
            await UserManager.DeleteAsync(user);
            await LoadAsync();

            if (grid is not null)
            {
                await grid.Reload();
            }
        }
    }
}
